import 'dart:async';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'screens/login_screen.dart';
import 'screens/home_screen.dart';
import 'utils/fonts.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // Ensure you have this file generated by FlutterFire CLI
import 'notifications/notification_service.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  await NotificationService.instance.init();
  await requestNotificationPermission();
  await _requestAndroid13Permission();
  await _requestExactAlarmPermission();

  // Initialize Supabase
  await Supabase.initialize(
    url: 'https://fzvqejmjbnygdkjdjtpj.supabase.co',
    anonKey:
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ6dnFlam1qYm55Z2RramRqdHBqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcwNDI3MzIsImV4cCI6MjA3MjYxODczMn0.ZHyLT8visKC9Dsp6xlpDscAWYXNWc1bgHEuhFl9NSDs', // Replace with your anon key securely
  );
  runApp(const MyApp());
}

Future<void> _requestAndroid13Permission() async {
  final fln = FlutterLocalNotificationsPlugin();
  await fln
      .resolvePlatformSpecificImplementation<
        AndroidFlutterLocalNotificationsPlugin
      >()
      ?.requestNotificationsPermission();
}

Future<void> requestNotificationPermission() async {
  if (await Permission.notification.isDenied) {
    await Permission.notification.request();
  }
}

Future<void> _requestExactAlarmPermission() async {
  if (await Permission.scheduleExactAlarm.isDenied) {
    await Permission.scheduleExactAlarm.request();
  }
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});
  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late final StreamSubscription<AuthState> _authSubscription;

  User? _user;

  @override
  void initState() {
    super.initState();
    _user = Supabase.instance.client.auth.currentUser;

    _authSubscription = Supabase.instance.client.auth.onAuthStateChange.listen((
      data,
    ) {
      setState(() {
        _user = data.session?.user;
      });
    });

    // Schedule notification properly
    _scheduleDeadlineNotification();
  }

  Future<void> _scheduleDeadlineNotification() async {
    await NotificationService.instance.scheduleDeadline(
      todoId: 'test1234',
      title: 'Test Task',
      deadlineUtc: DateTime.now().toUtc().add(const Duration(seconds: 20)),
    );
    debugPrint('Scheduled test notification for 20 seconds from now.');
  }

  @override
  void dispose() {
    _authSubscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tailor Todo',
      debugShowCheckedModeBanner: false,
      theme: buildAppTheme(),
      home: _user == null ? const LoginScreen() : const HomeScreen(),
    );
  }
}
